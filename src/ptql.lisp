(in-package #:ptql)

(defmacro create-row-expr (table-row row-expr)
  (with-gensyms (row expr row-symbols expr-symbol)
    `(let* ((,row ,table-row) 
            (,expr ',row-expr) 
            (,row-symbols (remove-if-not #'symbolp ,row))
            (,expr-symbol (find ,expr ,row-symbols :key #'intern-name)))
       (cond ((consp ,expr)
              (cons (car ,expr)
                    (reduce (lambda (acc symb)
                              (subst `(getf ,,row ,symb)
                                     (intern-name symb)
                                     acc))
                            ,row-symbols
                            :initial-value (cdr ,expr))))
             (,expr-symbol (getf ,row ,expr-symbol))
             (t ,expr)))))

(defmacro select (syms &key from)
  (let ((keys (mapcar (lambda (sym) (intern-keyword sym))
                      (mapcar #'symbol-name syms))))
    `(mapcar (lambda (row) (get-keys row ',keys))
             (table-rows (symbol-value (intern-global ,(symbol-name from)))))))


(create-row-expr *row* (or (+ a c) (> c (- b a))))
(create-row-expr *row* (> a c))
(create-row-expr (list :a 1 :b 4 :c 5) (and (+ (c + (c a) b ) a) nil))
(create-row-expr nil (or (+ a c) (> c (- b a))))
(create-row-expr nil x)
(create-row-expr *row* a)
